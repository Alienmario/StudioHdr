// sequence descriptions
struct mstudioseqdesc_t
{
	DECLARE_BYTESWAP_DATADESC();
	int					baseptr; 				// 0
	inline studiohdr_t	*pStudiohdr( void ) const { return (studiohdr_t *)(((byte *)this) + baseptr); }

	int					szlabelindex; 			// 4
	inline char * const pszLabel( void ) const { return ((char *)this) + szlabelindex; }

	int					szactivitynameindex; 	// 8
	inline char * const pszActivityName( void ) const { return ((char *)this) + szactivitynameindex; }

	int					flags;					// 12 // looping/non-looping flags

	int					activity;				// 16 // initialized at loadtime to game DLL values
	int					actweight;				// 20

	int					numevents;				// 24
	int					eventindex;				// 28
	inline mstudioevent_t *pEvent( int i ) const { Assert( i >= 0 && i < numevents); return (mstudioevent_t *)(((byte *)this) + eventindex) + i; };
	
	Vector				bbmin;					// 32 // per sequence bounding box
	Vector				bbmax;					// 44

	int					numblends;				// 56

	// Index into array of shorts which is groupsize[0] x groupsize[1] in length
	int					animindexindex;			// 60

	inline int			anim( int x, int y ) const
	{
		if ( x >= groupsize[0] )
		{
			x = groupsize[0] - 1;
		}

		if ( y >= groupsize[1] )
		{
			y = groupsize[ 1 ] - 1;
		}

		int offset = y * groupsize[0] + x;
		short *blends = (short *)(((byte *)this) + animindexindex);
		int value = (int)blends[ offset ];
		return value;
	}

	int					movementindex;			// 64 // [blend] float array for blended movement
	int					groupsize[2];			// 68
	int					paramindex[2];			// 76 // X, Y, Z, XR, YR, ZR
	float				paramstart[2];			// 84 // local (0..1) starting value
	float				paramend[2];			// 92 // local (0..1) ending value
	int					paramparent;			// 100

	float				fadeintime;				// 104 // ideal cross fate in time (0.2 default)
	float				fadeouttime;			// 108 // ideal cross fade out time (0.2 default)

	int					localentrynode;			// 112 // transition node at entry
	int					localexitnode;			// 116 // transition node at exit
	int					nodeflags;				// 120 // transition rules

	float				entryphase;				// 124 // used to match entry gait
	float				exitphase;				// 128 // used to match exit gait
	
	float				lastframe;				// 132 // frame that should generation EndOfSequence

	int					nextseq;				// 136 // auto advancing sequences
	int					pose;					// 140 // index of delta animation between end and nextseq

	int					numikrules;				// 144

	int					numautolayers;			// 148
	int					autolayerindex;			// 152
	inline mstudioautolayer_t *pAutolayer( int i ) const { Assert( i >= 0 && i < numautolayers); return (mstudioautolayer_t *)(((byte *)this) + autolayerindex) + i; };

	int					weightlistindex;		// 156
	inline float		*pBoneweight( int i ) const { return ((float *)(((byte *)this) + weightlistindex) + i); };
	inline float		weight( int i ) const { return *(pBoneweight( i)); };

	// FIXME: make this 2D instead of 2x1D arrays
	int					posekeyindex;			// 160
	float				*pPoseKey( int iParam, int iAnim ) const { return (float *)(((byte *)this) + posekeyindex) + iParam * groupsize[0] + iAnim; }
	float				poseKey( int iParam, int iAnim ) const { return *(pPoseKey( iParam, iAnim )); }

	int					numiklocks;				// 164
	int					iklockindex;			// 168
	inline mstudioiklock_t *pIKLock( int i ) const { Assert( i >= 0 && i < numiklocks); return (mstudioiklock_t *)(((byte *)this) + iklockindex) + i; };

	// Key values
	int					keyvalueindex;			// 172
	int					keyvaluesize;			// 176
	inline const char * KeyValueText( void ) const { return keyvaluesize != 0 ? ((char *)this) + keyvalueindex : NULL; }

	int					cycleposeindex;			// 180 // index of pose parameter to use as cycle index

	int					activitymodifierindex;	// 184
	int					numactivitymodifiers;	// 188
	inline mstudioactivitymodifier_t *pActivityModifier( int i ) const { Assert( i >= 0 && i < numactivitymodifiers); return activitymodifierindex != 0 ? (mstudioactivitymodifier_t *)(((byte *)this) + activitymodifierindex) + i : NULL; };

	int					animtagindex;			// 192
	int					numanimtags;			// 196
	inline mstudioanimtag_t *pAnimTag( int i ) const { Assert( i >= 0 && i < numanimtags); return (mstudioanimtag_t *)(((byte *)this) + animtagindex) + i; };

	int					rootDriverIndex;		// 200

	int					unused[2];				// 204 // remove/add as appropriate (grow back to 8 ints on version change!)
												// size: 212
	mstudioseqdesc_t(){}
private:
	// No copy constructors allowed
	mstudioseqdesc_t(const mstudioseqdesc_t& vOther);
};